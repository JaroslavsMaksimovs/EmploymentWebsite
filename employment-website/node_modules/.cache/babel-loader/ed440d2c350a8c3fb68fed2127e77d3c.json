{"ast":null,"code":"var _jsxFileName = \"/Users/Jaroslav/Desktop/COMP0029/employment-website/src/components/JobFindingButton.js\";\nimport React from 'react';\n\nconst JobFindingButton = ({\n  user\n}) => {\n  const findJob = async () => {\n    const typeFilter = jobs => {\n      if (user.jobType === \"Both\") {\n        return jobs;\n      } else {\n        const result = jobs.filter(job => {\n          return user.jobType === job.jobType;\n        });\n        return result;\n      }\n    };\n\n    const salaryFilter = jobs => {\n      const result = jobs.filter(job => {\n        return user.salary <= job.maximumSalary;\n      });\n      return result;\n    };\n\n    const essentialFilter = jobs => {\n      const result = jobs.filter(job => {\n        let matching = 0;\n        let requiredEducation = job.education.split(' ');\n        let candidateEducation = user.education.split(' ');\n\n        for (let i = 0; i < requiredEducation.length; i++) {\n          for (let j = 0; j < candidateEducation.length; j++) {\n            if (requiredEducation[i].toLowerCase() === candidateEducation[j].toLowerCase()) {\n              matching++;\n              console.log('word ' + requiredEducation[i] + ' was found in both strings');\n            }\n          }\n        }\n\n        return matching;\n      });\n      return result;\n    };\n\n    const result = await fetch('/api/vacancies/getAllTitles', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let jobs = await result.json();\n    jobs = typeFilter(jobs);\n    jobs = salaryFilter(jobs);\n    jobs = essentialFilter(jobs);\n    console.log(jobs);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: findJob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Find Job \"));\n};\n\nexport default JobFindingButton;","map":{"version":3,"sources":["/Users/Jaroslav/Desktop/COMP0029/employment-website/src/components/JobFindingButton.js"],"names":["React","JobFindingButton","user","findJob","typeFilter","jobs","jobType","result","filter","job","salaryFilter","salary","maximumSalary","essentialFilter","matching","requiredEducation","education","split","candidateEducation","i","length","j","toLowerCase","console","log","fetch","method","headers","json"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAErC,QAAMC,OAAO,GAAG,YAAY;AAE1B,UAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,UAAIH,IAAI,CAACI,OAAL,KAAiB,MAArB,EAA6B;AAC3B,eAAOD,IAAP;AACD,OAFD,MAEO;AACL,cAAME,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS;AAClC,iBAAQP,IAAI,CAACI,OAAL,KAAiBG,GAAG,CAACH,OAA7B;AACD,SAFc,CAAf;AAGA,eAAOC,MAAP;AACD;AACF,KATD;;AAWA,UAAMG,YAAY,GAAIL,IAAD,IAAU;AAC7B,YAAME,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS;AAClC,eAAQP,IAAI,CAACS,MAAL,IAAeF,GAAG,CAACG,aAA3B;AACD,OAFc,CAAf;AAGA,aAAOL,MAAP;AACD,KALD;;AAOA,UAAMM,eAAe,GAAIR,IAAD,IAAU;AAChC,YAAME,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS;AAClC,YAAIK,QAAQ,GAAG,CAAf;AACA,YAAIC,iBAAiB,GAAGN,GAAG,CAACO,SAAJ,CAAcC,KAAd,CAAoB,GAApB,CAAxB;AACA,YAAIC,kBAAkB,GAAGhB,IAAI,CAACc,SAAL,CAAeC,KAAf,CAAqB,GAArB,CAAzB;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,iBAAiB,CAACK,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAAkB,CAACE,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;AAClD,gBAAIN,iBAAiB,CAACI,CAAD,CAAjB,CAAqBG,WAArB,OAAuCJ,kBAAkB,CAACG,CAAD,CAAlB,CAAsBC,WAAtB,EAA3C,EAAgF;AAC9ER,cAAAA,QAAQ;AACRS,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAQT,iBAAiB,CAACI,CAAD,CAAzB,GAA6B,4BAAzC;AACD;AACF;AACF;;AACD,eAAOL,QAAP;AACD,OAbc,CAAf;AAcA,aAAOP,MAAP;AACD,KAhBD;;AAoBA,UAAMA,MAAM,GAAG,MAAMkB,KAAK,CAAC,6BAAD,EAC1B;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFX,KAD0B,CAA1B;AAOA,QAAItB,IAAI,GAAG,MAAME,MAAM,CAACqB,IAAP,EAAjB;AACAvB,IAAAA,IAAI,GAAGD,UAAU,CAACC,IAAD,CAAjB;AACAA,IAAAA,IAAI,GAAGK,YAAY,CAACL,IAAD,CAAnB;AACAA,IAAAA,IAAI,GAAGQ,eAAe,CAACR,IAAD,CAAtB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AACD,GApDD;;AAuDA,SACE,0CACE;AAAQ,IAAA,OAAO,EAAEF,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF;AASD,CAlED;;AAoEA,eAAeF,gBAAf","sourcesContent":["import React from 'react';\n\nconst JobFindingButton = ({ user }) => {\n\n  const findJob = async () => {\n\n    const typeFilter = (jobs) => {\n      if (user.jobType === \"Both\") {\n        return jobs;\n      } else {\n        const result = jobs.filter((job) => {\n          return (user.jobType === job.jobType);\n        });\n        return result;\n      }\n    }\n\n    const salaryFilter = (jobs) => {\n      const result = jobs.filter((job) => {\n        return (user.salary <= job.maximumSalary);\n      });\n      return result;\n    }\n\n    const essentialFilter = (jobs) => {\n      const result = jobs.filter((job) => {\n        let matching = 0;\n        let requiredEducation = job.education.split(' ');\n        let candidateEducation = user.education.split(' ');\n        for (let i = 0; i < requiredEducation.length; i++) {\n          for (let j = 0; j < candidateEducation.length; j++) {\n            if (requiredEducation[i].toLowerCase() === candidateEducation[j].toLowerCase()) {\n              matching++;\n              console.log('word '+requiredEducation[i]+' was found in both strings');\n            }\n          }\n        }\n        return matching;\n      });\n      return result;\n    }\n\n\n\n    const result = await fetch('/api/vacancies/getAllTitles',\n    {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    let jobs = await result.json();\n    jobs = typeFilter(jobs);\n    jobs = salaryFilter(jobs);\n    jobs = essentialFilter(jobs);\n    console.log(jobs);\n  };\n\n\n  return (\n    <>\n      <button onClick={findJob}>Find Job </button>\n    </>\n  )\n\n\n\n\n}\n\nexport default JobFindingButton;\n"]},"metadata":{},"sourceType":"module"}