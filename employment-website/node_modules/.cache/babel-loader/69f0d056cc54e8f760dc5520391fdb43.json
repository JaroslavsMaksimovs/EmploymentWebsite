{"ast":null,"code":"var _jsxFileName = \"/Users/Jaroslav/Desktop/COMP0029/employment-website/src/components/JobFindingButton.js\";\nimport React from 'react';\n\nconst JobFindingButton = ({\n  user\n}) => {\n  const typeFilter = jobs => {\n    if (user.jobType === \"Both\") {\n      return jobs;\n    } else {\n      const result = jobs.filter(job => {\n        return user.jobType === job.jobType;\n      });\n      return result;\n    }\n  };\n\n  const salaryFilter = jobs => {\n    const result = jobs.filter(job => {\n      return user.salary <= job.maximumSalary;\n    });\n    return result;\n  };\n\n  const stringCompare = (string1, string2) => {\n    let matches = 0;\n\n    for (let i = 0; i < string1.length; i++) {\n      for (let j = 0; j < string2.length; j++) {\n        if (string1[i].replace(',', '').replace('.', '').toLowerCase() === string2[j].replace(',', '').replace('.', '').toLowerCase()) {\n          matches++;\n        }\n      }\n    }\n\n    if (string1.length > 0) {\n      return matches / string1.length;\n    } else {\n      return 1;\n    }\n  };\n\n  const checkMatching = (job, attribute, coefficient) => {\n    const required = job[attribute].split(' ');\n    const candidate = user[attribute].split(' ');\n    return stringCompare(required, candidate) > coefficient;\n  };\n\n  const essentialFilter = jobs => {\n    const result = jobs.filter(job => {\n      let matching = 0;\n\n      if (checkMatching(job, 'education', 0.1)) {\n        matching++;\n      }\n\n      if (checkMatching(job, 'workExperience', 0.1)) {\n        matching++;\n      }\n\n      if (checkMatching(job, 'skills', 0.25)) {\n        matching++;\n      }\n\n      if (checkMatching(job, 'complementarySkills', 0.5)) {\n        matching++;\n      }\n\n      return matching > 1;\n    });\n    return result;\n  };\n\n  const findJob = async () => {\n    const result = await fetch('/api/vacancies/getAllTitles', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let jobs = await result.json();\n    jobs = typeFilter(jobs);\n    jobs = salaryFilter(jobs);\n    jobs = essentialFilter(jobs);\n    console.log(jobs);\n    /*\n      const search = await fetch('/api/seekers/search',\n      {\n        method: 'post',\n        body: JSON.stringify({ email: user.email, jobs: jobs }),\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n    */\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: findJob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Find Job \"));\n};\n\nexport default JobFindingButton;","map":{"version":3,"sources":["/Users/Jaroslav/Desktop/COMP0029/employment-website/src/components/JobFindingButton.js"],"names":["React","JobFindingButton","user","typeFilter","jobs","jobType","result","filter","job","salaryFilter","salary","maximumSalary","stringCompare","string1","string2","matches","i","length","j","replace","toLowerCase","checkMatching","attribute","coefficient","required","split","candidate","essentialFilter","matching","findJob","fetch","method","headers","json","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst JobFindingButton = ({ user }) => {\n\n  const typeFilter = (jobs) => {\n    if (user.jobType === \"Both\") {\n      return jobs;\n    } else {\n      const result = jobs.filter((job) => {\n        return (user.jobType === job.jobType);\n      });\n      return result;\n    }\n  }\n\n  const salaryFilter = (jobs) => {\n    const result = jobs.filter((job) => {\n      return (user.salary <= job.maximumSalary);\n    });\n    return result;\n  }\n\n  const stringCompare = (string1, string2) => {\n    let matches = 0;\n    for (let i = 0; i < string1.length; i++) {\n      for (let j = 0; j < string2.length; j++) {\n        if (string1[i].replace(',', '').replace('.', '').toLowerCase() === string2[j].replace(',', '').replace('.', '').toLowerCase()) {\n          matches++;\n        }\n      }\n    }\n    if (string1.length > 0) {\n      return matches/string1.length;\n    } else {\n      return 1;\n    }\n  }\n\n  const checkMatching = (job, attribute, coefficient) => {\n    const required = job[attribute].split(' ');\n    const candidate = user[attribute].split(' ');\n    return (stringCompare(required, candidate) > coefficient);\n  }\n\n  const essentialFilter = (jobs) => {\n    const result = jobs.filter((job) => {\n      let matching = 0;\n      if (checkMatching(job, 'education', 0.1)) {\n        matching++;\n      }\n      if (checkMatching(job, 'workExperience', 0.1)) {\n        matching++;\n      }\n      if (checkMatching(job, 'skills', 0.25)) {\n        matching++;\n      }\n      if (checkMatching(job, 'complementarySkills', 0.5)) {\n        matching++;\n      }\n      return matching > 1;\n    });\n    return result;\n  }\n\nconst findJob = async () => {\n\n  const result = await fetch('/api/vacancies/getAllTitles',\n  {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n  let jobs = await result.json();\n  jobs = typeFilter(jobs);\n  jobs = salaryFilter(jobs);\n  jobs = essentialFilter(jobs);\n  console.log(jobs);\n/*\n  const search = await fetch('/api/seekers/search',\n  {\n    method: 'post',\n    body: JSON.stringify({ email: user.email, jobs: jobs }),\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n*/\n};\n\n\n  return (\n    <>\n      <button onClick={findJob}>Find Job </button>\n    </>\n  )\n\n}\n\nexport default JobFindingButton;\n"]},"metadata":{},"sourceType":"module"}