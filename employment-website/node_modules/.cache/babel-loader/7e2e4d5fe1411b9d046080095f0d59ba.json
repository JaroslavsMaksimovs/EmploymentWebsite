{"ast":null,"code":"import _slicedToArray from \"/Users/Jaroslav/Desktop/COMP0029/employment-website/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Jaroslav/Desktop/COMP0029/employment-website/src/pages/CreateNewVacancyPage.js\";\nimport React, { useState } from 'react';\n\nconst CreateNewVacancyPage = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        jobTitle = _useState2[0],\n        setJobTitle = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        companyName = _useState4[0],\n        setCompanyName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        email = _useState6[0],\n        setEmail = _useState6[1];\n\n  const _useState7 = useState('permanent'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        jobType = _useState8[0],\n        setJobType = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        minimumSalary = _useState10[0],\n        setMinimumSalary = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        maximumSalary = _useState12[0],\n        setMaximumSalary = _useState12[1];\n\n  const _useState13 = useState(''),\n        _useState14 = _slicedToArray(_useState13, 2),\n        location = _useState14[0],\n        setLocation = _useState14[1];\n\n  const _useState15 = useState(''),\n        _useState16 = _slicedToArray(_useState15, 2),\n        essentialRequirements = _useState16[0],\n        setEssentialRequirements = _useState16[1];\n\n  const _useState17 = useState(''),\n        _useState18 = _slicedToArray(_useState17, 2),\n        beneficialRequirements = _useState18[0],\n        setBeneficialRequirements = _useState18[1];\n\n  const _useState19 = useState(''),\n        _useState20 = _slicedToArray(_useState19, 2),\n        description = _useState20[0],\n        setDescription = _useState20[1];\n\n  const addVacancy = async () => {\n    const today = new Date();\n    const dateAdded = today.getDate() + '.' + (today.getMonth() + 1) + '.' + today.getFullYear() + ' ' + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    const result = await fetch('/api/vacancies/add-new', {\n      method: 'post',\n      body: JSON.stringify({\n        jobTitle,\n        companyName,\n        email,\n        jobType,\n        minimumSalary,\n        maximumSalary,\n        location,\n        essentialRequirements,\n        beneficialRequirements,\n        description,\n        dateAdded\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(result);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Add new Vacancy\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Job Title:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: jobTitle,\n    onChange: event => setJobTitle(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Company Name:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: companyName,\n    onChange: event => setCompanyName(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Email:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: email,\n    onChange: event => setEmail(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Employment Type:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: jobType,\n    onChange: event => setJobType(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Minimum Salary:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: minimumSalary,\n    onChange: event => setMinimumSalary(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Maximum Salary:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: maximumSalary,\n    onChange: event => setMaximumSalary(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Location:\", React.createElement(\"input\", {\n    type: \"text\",\n    value: location,\n    onChange: event => setLocation(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Essential Requirements\", React.createElement(\"textarea\", {\n    rows: \"4\",\n    cols: \"50\",\n    value: essentialRequirements,\n    onChange: event => setEssentialRequirements(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Beneficial Requirements:\", React.createElement(\"textarea\", {\n    rows: \"4\",\n    cols: \"50\",\n    value: beneficialRequirements,\n    onChange: event => setBeneficialRequirements(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Description:\", React.createElement(\"textarea\", {\n    rows: \"6\",\n    cols: \"50\",\n    value: description,\n    onChange: event => setDescription(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: () => addVacancy(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Add new vacancy\")));\n};\n\nexport default CreateNewVacancyPage;","map":{"version":3,"sources":["/Users/Jaroslav/Desktop/COMP0029/employment-website/src/pages/CreateNewVacancyPage.js"],"names":["React","useState","CreateNewVacancyPage","jobTitle","setJobTitle","companyName","setCompanyName","email","setEmail","jobType","setJobType","minimumSalary","setMinimumSalary","maximumSalary","setMaximumSalary","location","setLocation","essentialRequirements","setEssentialRequirements","beneficialRequirements","setBeneficialRequirements","description","setDescription","addVacancy","today","Date","dateAdded","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","result","fetch","method","body","JSON","stringify","headers","console","log","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nconst CreateNewVacancyPage = () => {\n  const [jobTitle, setJobTitle] = useState('');\n  const [companyName, setCompanyName] = useState('');\n  const [email, setEmail] = useState('');\n  const [jobType, setJobType] = useState('permanent');\n  const [minimumSalary, setMinimumSalary] = useState('');\n  const [maximumSalary, setMaximumSalary] = useState('');\n  const [location, setLocation] = useState('');\n  const [essentialRequirements, setEssentialRequirements] = useState('');\n  const [beneficialRequirements, setBeneficialRequirements] = useState('');\n  const [description, setDescription] = useState('');\n\n\n\n  const addVacancy = async () => {\n    const today = new Date();\n    const dateAdded = today.getDate()+'.'+(today.getMonth()+1)+'.'+today.getFullYear()\n                       + ' ' + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    const result = await fetch('/api/vacancies/add-new', {\n      method: 'post',\n      body: JSON.stringify({jobTitle, companyName, email, jobType, minimumSalary, maximumSalary, location, essentialRequirements,\n        beneficialRequirements, description, dateAdded}),\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    console.log(result);\n  }\n\n\n\n  return (\n    <>\n      <div>\n        <h1>Add new Vacancy</h1>\n        <label>\n          Job Title:\n          <input type=\"text\" value={jobTitle} onChange={(event) => setJobTitle(event.target.value)} />\n        </label>\n        <label>\n          Company Name:\n          <input type=\"text\" value={companyName} onChange={(event) => setCompanyName(event.target.value)} />\n        </label>\n        <label>\n          Email:\n          <input type=\"text\" value={email} onChange={(event) => setEmail(event.target.value)} />\n        </label>\n        <label>\n          Employment Type:\n          <input type=\"text\" value={jobType} onChange={(event) => setJobType(event.target.value)} />\n        </label>\n        <label>\n          Minimum Salary:\n          <input type=\"text\" value={minimumSalary} onChange={(event) => setMinimumSalary(event.target.value)} />\n        </label>\n        <label>\n          Maximum Salary:\n          <input type=\"text\" value={maximumSalary} onChange={(event) => setMaximumSalary(event.target.value)} />\n        </label>\n        <label>\n          Location:\n          <input type=\"text\" value={location} onChange={(event) => setLocation(event.target.value)} />\n        </label>\n        <label>\n          Essential Requirements\n          <textarea rows=\"4\" cols=\"50\" value={essentialRequirements} onChange={(event) => setEssentialRequirements(event.target.value)} />\n        </label>\n        <label>\n          Beneficial Requirements:\n          <textarea rows=\"4\" cols=\"50\" value={beneficialRequirements} onChange={(event) => setBeneficialRequirements(event.target.value)}/>\n        </label>\n        <label>\n          Description:\n          <textarea rows=\"6\" cols=\"50\" value={description} onChange={(event) => setDescription(event.target.value)} />\n        </label>\n        <button onClick={() => addVacancy()}>Add new vacancy</button>\n      </div>\n    </>\n  );\n}\n\nexport default CreateNewVacancyPage;\n"]},"metadata":{},"sourceType":"module"}